<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Tue, 09 Aug 2022 17:25:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[抽象滲漏法則]]></title>
            <guid>3e7a8ffd78ba452b973dcdb019ed31a0</guid>
            <pubDate>Mon, 24 Feb 2020 18:56:08 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="抽象滲漏法則">抽象滲漏法則</h1>
<p>作者：周思博 (Joel Spolsky)
譯：Paul May 梅普華
Monday, November 11, 2002
屬於Joel on Software, <a title="http://www.joelonsoftware.com/" href="http://www.joelonsoftware.com/">http://www.joelonsoftware.com</a></p>
<p>你每天不可或缺的Internet裡有個關鍵的小魔法，這個魔法就在TCP通訊協定這個internet的基礎協定裡。</p>
<p>TCP是一種<em>可靠</em>的資料傳輸方法。我說可靠是指如果用TCP在網路上傳一個訊息，訊息一定會到，絕不會亂掉或壞掉。</p>
<p>TCP的用途很多，比如抓取網頁資料或傳電子郵件都是。由於TCP這麼可靠，連那些挪用錢的東非人電郵(譯註：指有陣子常見到的騙人信)都能完整無缺的到達，真是好笑。</p>
<p>相對的有另一種叫IP的<em>不可靠</em>資料傳輸方法。IP不保證資料會傳到，就算到了資料也可能會亂掉。如果你用IP傳送一堆訊 息，很可能只有一半的訊息到達，而且其中還有一些到達的順序和原先傳送時的順序不同，另外可能有幾個訊息的內容會變掉，可能變成可愛的猩猩寶貝照片，更可 能變成一堆看不懂的垃圾，看起來就像臺灣垃圾信的標題一樣。</p>
<p>這裡就是魔法所在：TCP是架在IP上面的。換句話說，TCP不得不靠<em>一個不可靠的工具</em>想辦法可靠地傳送資料。</p>
<p>為了說明這的確是個魔法，想想下面這個本質上相同(雖然有點滑稽)，來自真實世界的情節。</p>
<p>想像你有個方法把演員由百老匯送到好萊塢，基本上就是讓人坐上車後開車橫越國家送過去。有些車會出車禍讓可憐的演員掛掉。有時候演員在路上 喝醉了就去剃光頭或刺納粹刺青，結果變得太醜而不能在好萊塢工作。另外由於走的路線不同，演員到達的順序常會跟出發的順序不一樣。現在想像有個叫好萊塢快 遞的新服務，可以把演員送到好萊塢，並且保證演員一定會(a)到達，並保證(b)順序不變而且©狀態完美地到達。神奇之處在於好萊塢快遞除了原本的車 子以外，並沒有新的運送方法。好萊塢快遞的作法是在每個演員抵達時檢查演員的狀況，如果狀況不佳就打電話請公司把該演員的雙胞胎送來。如果演員到達的順序 不對，好萊塢快遞會照正確順序重新排好。如果51區有架大幽浮在內華達的高速公路上墜毀阻斷了交通，預定走這條路線的演員就會改走亞歷桑那州，好萊塢快遞 甚至不會把事情告訴加州的導演。導演只會覺得演員來得比平常慢，他們甚至不會<em>聽到</em>幽浮失事的消息。</p>
<p>TCP的魔法大致上就是這樣。這種作法常被電腦科學家稱為<em>抽象</em>：把複雜許多的東西隱藏起來的一種簡化動作。結果很多電腦 程式的設計都是在建立抽象機制。字串程式庫是什麼？它是一種偽裝，假裝電腦能像處理數字一樣輕易的處理字串。檔案系統又是什麼？也是一種偽裝，假裝硬碟並 不是一堆不停旋轉，可以儲存位元的磁性碟片，而是一個有著層層目錄的階層式系統，可以存放一個個由一或多個位元組字串構成的檔案。</p>
<p>把話題拉回TCP。稍早為了讓事情單純一點，我撒了一個小謊，而且現在有些人可能會因為這個謊氣得頭上冒煙。我說過TCP保證你的訊息會到達，其實並不會。如果你養的蛇把連接電腦的網路線咬斷了，就<em>沒有任何</em>IP封包可以通過，這時候TCP當然也不可能讓你的訊息抵達。如果你惹毛了公司的系統管理員，他們為了報復就把你接到已經超過負荷的集線器，因此只有部份的IP封包能通過，這時候TCP是會動，不過一切都會變得很慢。</p>
<p>這就是我稱之為<em>抽象機制有漏洞</em>的狀況。TCP試圖提供一個完整的抽象機制，想隱藏底下不可靠的網路，不過有時候網路會滲漏越過抽象機制，這時就會覺得抽象其實並不太能真的提供保護。這只是我所謂「抽象滲漏法則」的一個例子而已：</p>
<p><a title="Untitled%201/Untitled%20Database.csv" href="Untitled%201/Untitled%20Database.csv">Untitled</a></p>
<p>抽象會失效。有時候輕微有時候很嚴重，反正就是有漏洞。事情會因而出錯，而且當你有抽象機制時到處都可能會發生。下面有一些例子。</p>
<ul>
<li>像掃描一個大的二維陣列這麼簡單的動作，是由水平方向或垂直方向掃描都會嚴重影響效率，影響的大小依「木紋」(譯註：二維陣列排列的方 式)的方向而定，某個方向可能比另一個方向多產生許多的分頁失敗，而分頁失敗是很慢的。雖然寫組合語言的程式師應該可以假設自己擁有可連續定址的記憶體空 間，不過虛擬記憶體表示這種假設只是種抽象機制而已。當出現分頁失敗時或是某些記憶體讀取時漏洞就會出現，處理時間會比其他記憶體慢幾毫微秒。SQL語言希望把資料庫查詢的程序抽象化，讓你只要定義想要的東西，查詢動作的細節就交由資料庫去處理。不過在某些狀況下，有些SQL 查詢比邏輯上相等的查詢慢上幾千倍。這有個很有名的例子，在某個SQL伺服器用"where a=b and b=c and a=c"來查詢，會比用"where a=b and b=c"快上許多，可是查詢的結果其實是一樣的。照道理只要指定規格，並不需要在意程序。可是有時候抽象機制會失效並導致很差的效率，於是你就得跳出來用 查詢規劃分析器找出問題，然後想辦法加快查詢。.NFS或SMB之類的網路程式庫，能讓你「像」處理本機檔案一樣地處理遠端機器的檔案。有時候連線速度會變得很慢或是斷線，這時遠端檔案就不再像是在本機上了，而身為程式師的你必須加程式碼來處理這種狀況。「遠端檔案和本地檔案一樣」的抽象機制<a title="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E9%8C%AF%E8%AA%A4%E6%83%B3%E6%B3%95" href="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E9%8C%AF%E8%AA%A4%E6%83%B3%E6%B3%95">出現漏洞</a>了。 這裡有個Unix系統管理員的具體例子。如果你把使用者的home目錄放在用NFS掛入的磁碟上(一種抽象機制)，而使用者建了一個.forward檔案 把他們的電郵全部轉寄到其他地方(另一種抽象機制)，如果新郵件進來時NFS伺服器停掉了，由於找不到.forward檔訊息並不會被轉寄出去。這個抽象 機制的漏洞就真的會把一些訊息丟掉。C<ins>字串類別應該能讓你假裝字串是個第一級(first-class)資料。它們嘗試把<a title="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E5%9B%9E%E6%AD%B8%E5%8E%9F%E9%BB%9E" href="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E5%9B%9E%E6%AD%B8%E5%8E%9F%E9%BB%9E">「字串很難處理」</a>這個事實抽象掉，讓它使用上像整數一樣容易。幾乎所有C</ins>字串類別都會多載+運算子，才能把字串連接寫成<strong>s + “bar”</strong>。不過你知道嗎？不過怎麼努力，世上還是沒有C<ins>字串類別能讓你寫成**“foo” + “bar”**，因為C</ins>裡的字串常數一定是char*，絕對不會變成字串。這個抽象機制呈現一個程式語言本身不給補的漏洞。(有趣的是，C++隨時間演進的歷史，可以描述成嘗試用修補字串抽象機制漏洞的過程。他們為什麼不直接在語言本身加個原生的字串類別？這實在讓我搞不懂。)再來就是下雨天時開車沒辦法開得和平常一樣快，雖然車上有擋風玻璃雨刷有頭燈有車頂還有暖氣，這些裝備應該是讓你可以忽略下雨這個事實 (他們把天氣抽象化了)，不過看吧，你還是得擔心天雨路滑，有時候雨甚至會大到你看不遠，所以在只好慢慢地開，因為基於抽象滲漏法則，天氣永遠不能完全被 抽象化。</li>
</ul>
<p>抽象滲漏法則會造成問題的原因之一，是因為它說明了抽象機制並不真能照原構想簡化我們的生活。當我想訓練某人成為C++程式師時，最好能完全不教char<em>和指標運算，直接去學STL字串。問題是總有一天他們會寫出**“foo” + “bar”**這 樣的程式然後看到怪事出現，於是我就得停下來教他們有關char</em>的事情。他們也可能會試著呼叫某個需要OUT LPTSTR參數的Windows API函數，於是又得把char*、指標、Unicode、wchar_t以及TCHAR含入檔搞懂，才會知道如何呼叫。而這些全都是漏洞。</p>
<p>在教COM程式設計時，最好只要教學生如何使用Visual Studio的精靈和各個程式產生功能。不過萬一出了任何問題，他們根本不會知道怎麼回事，也不知道如何除錯或回復。我還是得教他們IUnknown和CLSID還有ProgIDS以及。哦，饒了我吧！</p>
<p>在教ASP.NET程式設計時，最好只要教學生可以在元件上雙擊，然後就能撰寫使用者點擊該元件時在伺服器執行的程式。不過處理超連結(<strong><a class="jop-noMdConv"></a></strong>) 點擊事件的HTML程式，和某個按鈕被按時的處理程式是不一樣的，而ASP.NET實際上是把這之間的差異抽象化了。問題來了，ASP.NET的設計者必 須把HTML無法由超連結傳送表格的事實隱藏起來。他們的做法是在超連結的onclick產理加上幾行JavaScript程式。不過這種抽象機制也有漏 洞，如果使用者關閉JavaScript功能，ASP.NET的應用程式就不能正常的運作了，萬一程式師又不瞭解ASP.NET抽象掉什麼東西，根本不可 能知道出了什麼問題。</p>
<p>抽象滲漏法則表示，當某人發明一套神奇的新程式產生工具，可以大幅提升效率等等，就會聽到很多人說：「應該先學會如何手動進行，然後才用這 個神奇的工具來節省時間。」 程式產生工具假裝抽象掉某些東西，和其他所有抽象機制一樣都有漏洞，而唯一能適當處理漏洞的方法，就是弄懂該抽象原理以及所隱藏的東西。所以抽象機制雖然 替我們節省了工作的時間，不過學習的時間是省不掉的。</p>
<p>而這一切都似非而是地表示，即使我們擁有愈來愈高階的程式設計工具，抽象化也做得愈來愈好，要成為一個純熟的程式師卻是愈來愈難了。</p>
<p>我第一次去微軟實習時，寫了一個在麥金塔執行的字串程式庫。那是一個很典型的任務：寫一個自己的<strong>strcat</strong>函數傳回指向新字串結尾的指標。只要寫幾行C就夠了。我做的每件事都寫在K&amp;R裡面(一本講C程式語言的薄書)。</p>
<p>今天為了要做CityDesk，我必須會Visual Basic、COM、ATL、C++、InnoSetup、Internet Explorer內部機制、正規表示式、DOM、HTML、CSS以及XML。一大堆比古老的K&amp;R更高階的工具，可是我還是得會K&amp;R 講的東西，否則我就完了。</p>
<p>我們十年前可能想像過，現在會有某些全新的程式設計典範讓程式設計更容易。事實上這些年間所建立的抽象機制，<em>的確</em>讓我們 能處理更高複雜度的軟體開發(如GUI程式設計和網路程式設計)，這是十或十五年前無法處理的。這些偉大的工具(比如OO型式的程式語言)雖然能讓我們用 飛快的速度完成許多工作，不過總會有一天我們得去追查因抽象滲漏而產生的問題，到時候就得查上兩星期了。另外雖然你得雇一個以寫VB程式為主的程式師，不 過單純的VB程式師是不夠的，因為當VB的抽象機制滲漏時他們就完全卡住了。</p>
<p>抽象滲漏法則正在拖垮我們。</p>
<p>這些網頁的內容為表達個人意見。
All contents Copyright © 1999-2006 by Joel Spolsky. All Rights Reserved.</p>
<p><a title="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E6%8A%BD%E8%B1%A1%E6%BB%B2%E6%BC%8F%E6%B3%95%E5%89%87" href="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E6%8A%BD%E8%B1%A1%E6%BB%B2%E6%BC%8F%E6%B3%95%E5%89%87">http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:抽象滲漏法則</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[最危險的遊戲]]></title>
            <guid>0106e90d30cb416d967ce580372f215a</guid>
            <pubDate>Mon, 24 Feb 2020 18:55:56 GMT</pubDate>
            <content:encoded><![CDATA[<p>——理察·康奈爾</p>
<p>「右邊那裡就是舊海圖上的所謂沉舟島,」惠特尼說,「海員對那個地方有著莫名其妙的恐懼。迷信……」</p>
<p>「看不見,」雷恩斯福德說。他試圖透過籠罩著遊艇的潮濕而悶熱的夜幕張望。</p>
<p>「再過幾天到了巴西,天空就會晴朗多了,」惠特尼保證說,「我們應當在亞馬孫河上游痛痛快快地打打獵。打獵是一種好運動。」</p>
<p>「是世界上最好的運動，」雷恩斯福德表示同意。</p>
<p>後來，他的夥伴下去睡覺了，雷恩斯福德留在甲板上再抽一袋煙。正吸菸時，一種意料不到的聲音使他吃了一驚，接連又是兩聲，黑夜中有人開了三槍。</p>
<p>他朝槍響的方向極目眺望，但象是隔著一張毯子要透視過去似的。雷恩斯福德跳上船欄，以便站得更高些，菸斗撞著繩索，從嘴邊掉了下去。他急忙傾身抓菸斗，身體一下子失去了平衡，跌落到像熱血般溫暖的加勒比海中。他掙扎著游出水面，大聲呼喊。隨著遊艇的燈光越離越遠，他拚命地划水追趕，但是燈光很快就消失在夜色中。</p>
<p>剛才的槍聲來自右方。雷恩斯福德盡力朝那個方向游去，不知遊了多久。然後從昏暗中傳來了獸類受驚嚇時的叫聲——接著就被一聲響亮而短促的手槍聲打斷了。</p>
<p>差不多已經游到了礁石上，他才看見是礁石。他使出剩下的一點力掙脫開旋流，喘著氣，一頭撲在礁石上，就呼呼大睡起來。</p>
<p>一覺醒來時已近黃昏。海灘邊的叢林中顯然無路可通，倒不如沿著岸邊走去還比較方便些。暮靄漸漸籠罩住大海和叢林，雷恩斯福德這才看見崖壁高處一幢寬大的房子所閃射出的燈光。於是他走上了台階。</p>
<p>一個穿著制服，身材魁梧、大黑鬍子垂到腰部的人，手握左輪開了門。</p>
<p>「不用大驚小怪，」雷恩斯福德說，「我是從船上落海的。我的名字叫桑格·雷恩斯福德，家住紐約市。」</p>
<p>又一個身穿晚禮服的白頭髮高個子走出來，並且伸出了手。「我是沙洛夫將軍。承蒙大名鼎鼎的狩獵家雷恩斯福德先生光臨，真不勝榮幸。我拜讀過你在西藏尋獵雪豹的那本大作。」他做了個手勢，那穿制服的人收起了手槍。</p>
<p>「伊凡壯得出奇，」將軍說，「有點象野蠻人。他是哥薩克人，我也是。」</p>
<p>「還是請進來吧，我們不應該在門口聊天。你需要換換衣服，吃點東西，休息一下。請吧，雷恩斯福德先生，讓伊凡給你帶路。」</p>
<p>後來他們在豪華的大廳里坐下來吃晚飯時，將軍說道：「我知道你的大名，你也許感到奇怪。有關打獵的書我全都讀過。我生平只有一種嗜好–打獵。」</p>
<p>「你這裡有一些很漂亮的獸頭，」雷恩斯福德望了望牆壁說，「那隻好望角野牛真大。我一直認為在所有的大野獸中好望角野牛是最危險的。」</p>
<p>「那倒不是，」將軍回答說，「在這裡的獵場上，我獵取的是更危險的獵物。當然不是土生土長的，得由我向這島上提供。」</p>
<p>「將軍，你弄進來些什麼東西呢？老虎嗎？」</p>
<p>將軍咧嘴笑了一笑：「不是，老虎已經是不夠刺激的了，並不真正危險。雷恩斯福德先生，我所尋求的是危險。」</p>
<p>「究竟是什麼獵物……？」</p>
<p>「我告訴你，我終於認識到，我必須創造出一種新的動物來獵取。我又問自己：理想的獵物應該具備哪些特點？答案是：必須有勇氣，有智謀–而最重要的是–必須具有思維能力。好在有一種動物能夠思維。」</p>
<p>「你的意思該不會是說殺人吧？」</p>
<p>「這詞兒多難聽，」將軍說道，「我獵取的不過是世上的渣滓–不定期貨船上的船員。來窗口看看吧，」他一按電鈕，遠方海上便出現閃光。「燈光指示出一航道，那裡都是些象剃刀那樣銳利的礁石，船隻碰上去就象堅果殼被碰碎似的。」</p>
<p>「你要明白，這是一種遊戲。我向來客提出打獵的建議。讓他先走三小時。我隨後出發，只帶一隻22口徑手槍。如果受獵的人能三整天不讓我找到他，他就贏了。如果被我找到」–將軍微微一笑–「那他就輸了。」</p>
<p>「要是他不肯受獵呢？」</p>
<p>「那麼我就把他交給伊凡，這個人頭腦簡單，曾經一度擔任過沙皇手下正式的鞭笞手，對於遊戲，有他自己一套想法。來客總是寧可打獵的。</p>
<p>「如果客人贏了呢？」</p>
<p>將軍笑得更得意了。「迄今我還沒輸過，不過曾經有一個人幾乎贏了。我最後不得不出動獵犬。你來看，」他領先走向另一窗口，雷恩斯福德看見十來只巨大的黑色的東西在下面晃動。</p>
<p>「現在我帶你去參觀一下最近收集的獵物。到書房去，好嗎？不想來！啊，對了。你需要好好睡一覺。明天你就會覺得象換了一個人似的。」</p>
<p>「第二天一直到午飯時分沙洛夫將軍才露面。雷恩斯福德發現他那雙漆黑的眼睛在打量自己。「今晚，」將軍說，「我們去打獵–就你和我兩個人。」</p>
<p>「不，將軍，」雷恩斯福德說，「我不打獵。」</p>
<p>將軍聳了聳肩：「隨你的便吧。不過我提醒你，我的所謂遊戲，比伊凡的卻有趣得多。你會認為這值得一試–我們可以鬥智，比森林知識，較量體力。」</p>
<p>「如果我贏了……」雷恩斯福德開口說。</p>
<p>「如果到了第三天的午夜，我還沒有找到你，我就承認失敗。我的小帆船會把你送上大陸。我決不食言。」</p>
<p>「現在，」沙洛夫一本正經地說，「伊凡會把獵裝，食物和一把刀給你。我勸你避開島上東南角上的大沼澤，我們把那個地方稱為死沼，那裡有流沙。我要等到黃昏才出發。夜晚打獵比較有意思，你說是嗎？」</p>
<p>……</p>
<p>雷恩斯福德被一種近乎驚慌的心情所驅使，在叢林中奔走了兩小時，此刻才停下來估量形勢。</p>
<p>「這樣我會讓他有蹤跡可循了。」他暗自思忖著，一面踏上了無路的荒野。想起獵狐的經驗和狐狸逃遁的方式，他踏出了一連串複雜的圈子，弄得足跡往返交錯。天黑了，雷恩斯福德到達林木茂密的山脊，腿走累了。「當了狐狸，」他想，「現在再當野貓。」近旁有一棵枝椏粗密的大樹，他小心翼翼地爬了上去，避免遺留痕跡，然後躺在一根粗壯的大樹枝上。</p>
<p>長夜漫漫。將近黎明時分，聽到叢林中有什麼東西緩慢而又謹慎地走過來。他將身軀貼緊大樹枝，透過濃密的層層樹葉向下望去。</p>
<p>是沙洛夫將軍。他一步一步地走過來，兩眼密切注視著地面。快到樹下時他停了下來，跪在地上察看一陣。接著又站起來，點燃了一支黑色的長香菸。</p>
<p>他的目光沿著樹幹一寸又一寸地向上移，雷恩斯福德屏住呼吸。但那獵人敏銳的目光快移到獵物棲身的樹枝時卻停住了。沙洛夫深思熟慮地微笑著，一邊張嘴向空中噴了個煙圈。隨即漫不經心地走開了。</p>
<p>雷恩斯福德把胸中憋了好久的氣吐了出來。他首先想到：那將軍顯然在夜晚也能在叢林中進行艱難的追蹤，只因為一時不巧，才沒看到他所追獵的對象。</p>
<p>他再仔細一想：將軍笑什麼？為什麼轉身回去？那是將軍在捉弄他，要留他再戲耍一天。</p>
<p>雷恩斯福德此刻體會到恐懼的滋味了。</p>
<p>他從樹上滑下來，進入森林。走了三百碼後便停住了腳，在那裡有株大枯樹。很不牢固地斜靠著一株較小的活樹。他拔刀出鞘，開始動手。幹完後，他急忙躲到一百英尺外一根倒放著的原木後面。他等了沒多久。</p>
<p>那哥薩克人只顧一味追蹤，沒有發現機關，一腳踩了上去。他的腳碰上凸出的樹枝–觸發裝置。將軍發覺情況不對，縱身後躍，但是已經晚了；枯樹倒下，擦身擊中了他。他站在那裡，揉著受傷的肩膀，那含有譏諷的笑聲響徹叢林。</p>
<p>「雷恩斯福德，」他叫道，「讓我祝賀你。沒有多少人會架設馬來捕人機。你真有意思，雷恩斯福德先生，現在我回去裹傷；只是一點輕傷。別著急，我會回來的。」</p>
<p>將軍走了之後，雷恩斯福德繼續奔逃。天色漸暗，接著黑夜降臨。他覺得他的鹿皮鞋踩在地上越來越軟。再跨前一步，腳陷進了爛泥。原來是死沼！</p>
<p>鬆軟的土地使他有了個主意。他從流沙處退後十幾英尺，開始在地面掘坑。挖到齊肩的深度時，他爬上來找了些堅硬的小樹製作樹樁，將一頭削尖。這些樹樁都插進坑底，尖端向上。接著他又用野草和樹枝搭編成粗席，蓋住坑口，然後，他汗流浹背地蹲在一棵樹後。</p>
<p>聽到鬆軟土地的腳步聲。他知道追逐者來了。接著是樹枝的折裂聲–以及樹樁戳中什麼時的哀叫。他探頭一瞧，在坑邊三英尺處，有一個人拿著手電筒站著。</p>
<p>「雷恩斯福德！」將軍叫道，「你的緬甸獵虎坑弄死了我一隻最好的狗。你又得手了。現在我要把獵狗都帶來，看你怎樣應付。多謝，這一夜玩得很有趣。」</p>
<p>拂曉時分，留在沼澤附近的雷恩斯福德驚醒過來，聽到遠處模糊而又不連續的聲音：獵犬的狂吠。他站著思索了一陣，想起在烏干達學會的土著把戲。</p>
<p>他離開沼澤地，很快找到一株有彈性的小樹。他將獵刀綁在小樹上，鋒刃衝著足跡。再用一截野葡萄藤將小樹反扎……然後拚命跑開。獵犬嗅出了新鮮氣味，叫得更起勁了，雷恩斯福德那時體會到了當困獸的感覺。</p>
<p>獵狗的吠叫聲突然停止。雷恩斯福德跳動的心也跟著停住了。他們一定來到了插刀的地方。</p>
<p>他激動地爬上樹，回頭張望。追逐者已站定了。但希望落了空，眼見沙洛夫將軍一槍在手，依然無恙。彈起的小樹揮動獵刀，卻擊中了用皮帶牽著獵犬的伊凡。</p>
<p>雷恩斯福德跳回地面，獵犬又狂吠起來。</p>
<p>「要鎮靜，別慌！」他一面撒腿狂奔，一面喘著氣自言自語。前面樹木間呈現出一條藍色的裂縫。他到達了海邊，隔著小海灣他可以看到對面築成那幢大房子的灰色巨石。波濤在二十英尺下激盪翻騰。雷恩斯福德猶豫了一會兒，然後便縱身躍入海中。</p>
<p>將軍帶著他的獵犬趕到海邊空曠處站住，對著碧綠色的那片海水觀望了一陣。</p>
<p>當天晚上吃飯時，有兩件懊惱的事情使沙洛夫將軍吃得不香。第一，不容易找到人接替伊凡；第二，獵物沒到手。當然，這是由於那個已自殺的美國人沒有遵守比賽規則。於是他去書房讀書，藉以排遣愁悶。到了十點鐘，他感到有點舒適而又疲倦，這才起身轉回臥室。</p>
<p>他沒有開燈，先走到窗邊看看下面的院子。那些大獵犬在月光下都看得很清楚，他不覺大聲說道：「希望下次運氣好點。」接著便扭亮了燈。</p>
<p>一直躲在有罩蓋的床帳里的人，站在他的面前。</p>
<p>「雷恩斯福德！」將軍尖叫起來，「天曉得你是怎麼會來到這裡的？」</p>
<p>「游過來的。我發現這樣比穿過叢林要快些。」</p>
<p>對方倒吸一口冷氣，露出笑容：「我向你道賀，這場遊戲你贏了。」</p>
<p>雷恩斯福德卻沒有笑。「我還是一頭陷入絕境的困獸，」他的嗓音低啞深沉，「準備吧，沙洛夫。」</p>
<p>這位將軍深深鞠了一躬。「我明白，」他說道，「好極了。我們之中總有一個要拿去餵狗。另一個就睡在這張美好的床上。小心吧，雷恩斯福德……」</p>
<p>雷恩斯福德認為他有生以來從沒有睡過比這更舒適的床。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[斜屋犯罪]]></title>
            <guid>6979800697984adba0d56088d24124df</guid>
            <pubDate>Mon, 24 Feb 2020 18:55:56 GMT</pubDate>
            <content:encoded><![CDATA[內容簡介
《斜屋犯罪》感
出場人物
序幕
〔第一幕〕第一場　流冰館的玄關<a href="/article/最危險的遊戲">最危险的游戏</a>
〔第一幕〕第二場　流冰館的會客室
〔第一幕〕第三場　塔
〔第一幕〕第四場　一號房
〔第一幕〕第五場　會客室
〔第一幕〕第六場　圖書室
〔第二幕〕第一場　會客室
〔第二幕〕第二場　十四號房，菊岡榮吉的房間
〔第二幕〕第三場　九號房，金井夫婦的房間
〔第二幕〕第四場　再度回到會客室
〔第二幕〕第五場　塔上幸三郎的房間
〔第二幕〕第六場　會客室
〔第二幕〕第七場　圖書室
〔第二幕〕第八場　會客室
〔第二幕〕第九場　天狗屋
〔第二幕〕第十場　會客室
〔第三幕〕第一場　會客室
〔第三幕〕第二場　天狗屋
〔第三幕〕第三場　十五號房，刑警的房間
〔第三幕〕第四場　會客室
〔第三幕〕第五場　圖書室
〔第三幕〕第六場　會客室
〔中場休息〕
〔終幕〕第一場　會客室西側樓梯一樓轉角處
〔終幕〕第二場　十四號房
〔終幕〕第三場　天狗屋
〔終幕〕第四場　會客室
〔終幕〕第五場　小丘
〔尾聲〕]]></content:encoded>
        </item>
    </channel>
</rss>