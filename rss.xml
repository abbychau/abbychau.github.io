<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Tue, 09 Aug 2022 17:07:43 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[抽象滲漏法則]]></title>
            <guid>3e7a8ffd78ba452b973dcdb019ed31a0</guid>
            <pubDate>Mon, 24 Feb 2020 18:56:08 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="抽象滲漏法則">抽象滲漏法則</h1>
<p>作者：周思博 (Joel Spolsky)
譯：Paul May 梅普華
Monday, November 11, 2002
屬於Joel on Software, <a title="http://www.joelonsoftware.com/" href="http://www.joelonsoftware.com/">http://www.joelonsoftware.com</a></p>
<p>你每天不可或缺的Internet裡有個關鍵的小魔法，這個魔法就在TCP通訊協定這個internet的基礎協定裡。</p>
<p>TCP是一種<em>可靠</em>的資料傳輸方法。我說可靠是指如果用TCP在網路上傳一個訊息，訊息一定會到，絕不會亂掉或壞掉。</p>
<p>TCP的用途很多，比如抓取網頁資料或傳電子郵件都是。由於TCP這麼可靠，連那些挪用錢的東非人電郵(譯註：指有陣子常見到的騙人信)都能完整無缺的到達，真是好笑。</p>
<p>相對的有另一種叫IP的<em>不可靠</em>資料傳輸方法。IP不保證資料會傳到，就算到了資料也可能會亂掉。如果你用IP傳送一堆訊 息，很可能只有一半的訊息到達，而且其中還有一些到達的順序和原先傳送時的順序不同，另外可能有幾個訊息的內容會變掉，可能變成可愛的猩猩寶貝照片，更可 能變成一堆看不懂的垃圾，看起來就像臺灣垃圾信的標題一樣。</p>
<p>這裡就是魔法所在：TCP是架在IP上面的。換句話說，TCP不得不靠<em>一個不可靠的工具</em>想辦法可靠地傳送資料。</p>
<p>為了說明這的確是個魔法，想想下面這個本質上相同(雖然有點滑稽)，來自真實世界的情節。</p>
<p>想像你有個方法把演員由百老匯送到好萊塢，基本上就是讓人坐上車後開車橫越國家送過去。有些車會出車禍讓可憐的演員掛掉。有時候演員在路上 喝醉了就去剃光頭或刺納粹刺青，結果變得太醜而不能在好萊塢工作。另外由於走的路線不同，演員到達的順序常會跟出發的順序不一樣。現在想像有個叫好萊塢快 遞的新服務，可以把演員送到好萊塢，並且保證演員一定會(a)到達，並保證(b)順序不變而且©狀態完美地到達。神奇之處在於好萊塢快遞除了原本的車 子以外，並沒有新的運送方法。好萊塢快遞的作法是在每個演員抵達時檢查演員的狀況，如果狀況不佳就打電話請公司把該演員的雙胞胎送來。如果演員到達的順序 不對，好萊塢快遞會照正確順序重新排好。如果51區有架大幽浮在內華達的高速公路上墜毀阻斷了交通，預定走這條路線的演員就會改走亞歷桑那州，好萊塢快遞 甚至不會把事情告訴加州的導演。導演只會覺得演員來得比平常慢，他們甚至不會<em>聽到</em>幽浮失事的消息。</p>
<p>TCP的魔法大致上就是這樣。這種作法常被電腦科學家稱為<em>抽象</em>：把複雜許多的東西隱藏起來的一種簡化動作。結果很多電腦 程式的設計都是在建立抽象機制。字串程式庫是什麼？它是一種偽裝，假裝電腦能像處理數字一樣輕易的處理字串。檔案系統又是什麼？也是一種偽裝，假裝硬碟並 不是一堆不停旋轉，可以儲存位元的磁性碟片，而是一個有著層層目錄的階層式系統，可以存放一個個由一或多個位元組字串構成的檔案。</p>
<p>把話題拉回TCP。稍早為了讓事情單純一點，我撒了一個小謊，而且現在有些人可能會因為這個謊氣得頭上冒煙。我說過TCP保證你的訊息會到達，其實並不會。如果你養的蛇把連接電腦的網路線咬斷了，就<em>沒有任何</em>IP封包可以通過，這時候TCP當然也不可能讓你的訊息抵達。如果你惹毛了公司的系統管理員，他們為了報復就把你接到已經超過負荷的集線器，因此只有部份的IP封包能通過，這時候TCP是會動，不過一切都會變得很慢。</p>
<p>這就是我稱之為<em>抽象機制有漏洞</em>的狀況。TCP試圖提供一個完整的抽象機制，想隱藏底下不可靠的網路，不過有時候網路會滲漏越過抽象機制，這時就會覺得抽象其實並不太能真的提供保護。這只是我所謂「抽象滲漏法則」的一個例子而已：</p>
<p><a title="Untitled%201/Untitled%20Database.csv" href="Untitled%201/Untitled%20Database.csv">Untitled</a></p>
<p>抽象會失效。有時候輕微有時候很嚴重，反正就是有漏洞。事情會因而出錯，而且當你有抽象機制時到處都可能會發生。下面有一些例子。</p>
<ul>
<li>像掃描一個大的二維陣列這麼簡單的動作，是由水平方向或垂直方向掃描都會嚴重影響效率，影響的大小依「木紋」(譯註：二維陣列排列的方 式)的方向而定，某個方向可能比另一個方向多產生許多的分頁失敗，而分頁失敗是很慢的。雖然寫組合語言的程式師應該可以假設自己擁有可連續定址的記憶體空 間，不過虛擬記憶體表示這種假設只是種抽象機制而已。當出現分頁失敗時或是某些記憶體讀取時漏洞就會出現，處理時間會比其他記憶體慢幾毫微秒。SQL語言希望把資料庫查詢的程序抽象化，讓你只要定義想要的東西，查詢動作的細節就交由資料庫去處理。不過在某些狀況下，有些SQL 查詢比邏輯上相等的查詢慢上幾千倍。這有個很有名的例子，在某個SQL伺服器用"where a=b and b=c and a=c"來查詢，會比用"where a=b and b=c"快上許多，可是查詢的結果其實是一樣的。照道理只要指定規格，並不需要在意程序。可是有時候抽象機制會失效並導致很差的效率，於是你就得跳出來用 查詢規劃分析器找出問題，然後想辦法加快查詢。.NFS或SMB之類的網路程式庫，能讓你「像」處理本機檔案一樣地處理遠端機器的檔案。有時候連線速度會變得很慢或是斷線，這時遠端檔案就不再像是在本機上了，而身為程式師的你必須加程式碼來處理這種狀況。「遠端檔案和本地檔案一樣」的抽象機制<a title="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E9%8C%AF%E8%AA%A4%E6%83%B3%E6%B3%95" href="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E9%8C%AF%E8%AA%A4%E6%83%B3%E6%B3%95">出現漏洞</a>了。 這裡有個Unix系統管理員的具體例子。如果你把使用者的home目錄放在用NFS掛入的磁碟上(一種抽象機制)，而使用者建了一個.forward檔案 把他們的電郵全部轉寄到其他地方(另一種抽象機制)，如果新郵件進來時NFS伺服器停掉了，由於找不到.forward檔訊息並不會被轉寄出去。這個抽象 機制的漏洞就真的會把一些訊息丟掉。C<ins>字串類別應該能讓你假裝字串是個第一級(first-class)資料。它們嘗試把<a title="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E5%9B%9E%E6%AD%B8%E5%8E%9F%E9%BB%9E" href="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E5%9B%9E%E6%AD%B8%E5%8E%9F%E9%BB%9E">「字串很難處理」</a>這個事實抽象掉，讓它使用上像整數一樣容易。幾乎所有C</ins>字串類別都會多載+運算子，才能把字串連接寫成<strong>s + “bar”</strong>。不過你知道嗎？不過怎麼努力，世上還是沒有C<ins>字串類別能讓你寫成**“foo” + “bar”**，因為C</ins>裡的字串常數一定是char*，絕對不會變成字串。這個抽象機制呈現一個程式語言本身不給補的漏洞。(有趣的是，C++隨時間演進的歷史，可以描述成嘗試用修補字串抽象機制漏洞的過程。他們為什麼不直接在語言本身加個原生的字串類別？這實在讓我搞不懂。)再來就是下雨天時開車沒辦法開得和平常一樣快，雖然車上有擋風玻璃雨刷有頭燈有車頂還有暖氣，這些裝備應該是讓你可以忽略下雨這個事實 (他們把天氣抽象化了)，不過看吧，你還是得擔心天雨路滑，有時候雨甚至會大到你看不遠，所以在只好慢慢地開，因為基於抽象滲漏法則，天氣永遠不能完全被 抽象化。</li>
</ul>
<p>抽象滲漏法則會造成問題的原因之一，是因為它說明了抽象機制並不真能照原構想簡化我們的生活。當我想訓練某人成為C++程式師時，最好能完全不教char<em>和指標運算，直接去學STL字串。問題是總有一天他們會寫出**“foo” + “bar”**這 樣的程式然後看到怪事出現，於是我就得停下來教他們有關char</em>的事情。他們也可能會試著呼叫某個需要OUT LPTSTR參數的Windows API函數，於是又得把char*、指標、Unicode、wchar_t以及TCHAR含入檔搞懂，才會知道如何呼叫。而這些全都是漏洞。</p>
<p>在教COM程式設計時，最好只要教學生如何使用Visual Studio的精靈和各個程式產生功能。不過萬一出了任何問題，他們根本不會知道怎麼回事，也不知道如何除錯或回復。我還是得教他們IUnknown和CLSID還有ProgIDS以及。哦，饒了我吧！</p>
<p>在教ASP.NET程式設計時，最好只要教學生可以在元件上雙擊，然後就能撰寫使用者點擊該元件時在伺服器執行的程式。不過處理超連結(<strong><a class="jop-noMdConv"></a></strong>) 點擊事件的HTML程式，和某個按鈕被按時的處理程式是不一樣的，而ASP.NET實際上是把這之間的差異抽象化了。問題來了，ASP.NET的設計者必 須把HTML無法由超連結傳送表格的事實隱藏起來。他們的做法是在超連結的onclick產理加上幾行JavaScript程式。不過這種抽象機制也有漏 洞，如果使用者關閉JavaScript功能，ASP.NET的應用程式就不能正常的運作了，萬一程式師又不瞭解ASP.NET抽象掉什麼東西，根本不可 能知道出了什麼問題。</p>
<p>抽象滲漏法則表示，當某人發明一套神奇的新程式產生工具，可以大幅提升效率等等，就會聽到很多人說：「應該先學會如何手動進行，然後才用這 個神奇的工具來節省時間。」 程式產生工具假裝抽象掉某些東西，和其他所有抽象機制一樣都有漏洞，而唯一能適當處理漏洞的方法，就是弄懂該抽象原理以及所隱藏的東西。所以抽象機制雖然 替我們節省了工作的時間，不過學習的時間是省不掉的。</p>
<p>而這一切都似非而是地表示，即使我們擁有愈來愈高階的程式設計工具，抽象化也做得愈來愈好，要成為一個純熟的程式師卻是愈來愈難了。</p>
<p>我第一次去微軟實習時，寫了一個在麥金塔執行的字串程式庫。那是一個很典型的任務：寫一個自己的<strong>strcat</strong>函數傳回指向新字串結尾的指標。只要寫幾行C就夠了。我做的每件事都寫在K&amp;R裡面(一本講C程式語言的薄書)。</p>
<p>今天為了要做CityDesk，我必須會Visual Basic、COM、ATL、C++、InnoSetup、Internet Explorer內部機制、正規表示式、DOM、HTML、CSS以及XML。一大堆比古老的K&amp;R更高階的工具，可是我還是得會K&amp;R 講的東西，否則我就完了。</p>
<p>我們十年前可能想像過，現在會有某些全新的程式設計典範讓程式設計更容易。事實上這些年間所建立的抽象機制，<em>的確</em>讓我們 能處理更高複雜度的軟體開發(如GUI程式設計和網路程式設計)，這是十或十五年前無法處理的。這些偉大的工具(比如OO型式的程式語言)雖然能讓我們用 飛快的速度完成許多工作，不過總會有一天我們得去追查因抽象滲漏而產生的問題，到時候就得查上兩星期了。另外雖然你得雇一個以寫VB程式為主的程式師，不 過單純的VB程式師是不夠的，因為當VB的抽象機制滲漏時他們就完全卡住了。</p>
<p>抽象滲漏法則正在拖垮我們。</p>
<p>這些網頁的內容為表達個人意見。
All contents Copyright © 1999-2006 by Joel Spolsky. All Rights Reserved.</p>
<p><a title="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E6%8A%BD%E8%B1%A1%E6%BB%B2%E6%BC%8F%E6%B3%95%E5%89%87" href="http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:%E6%8A%BD%E8%B1%A1%E6%BB%B2%E6%BC%8F%E6%B3%95%E5%89%87">http://local.joelonsoftware.com/wiki/The_Joel_on_Software_Translation_Project:抽象滲漏法則</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[最危险的游戏]]></title>
            <guid>0106e90d30cb416d967ce580372f215a</guid>
            <pubDate>Mon, 24 Feb 2020 18:55:56 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="最危险的游戏">最危险的游戏</h1>
<p>Created: Jun 24, 2014 2:59 AM
Updated: Jun 22, 2015 3:41 AM</p>
<p>最危险的游戏[美] 理查德·康奈尔“右边那里就是旧海图上的所谓沉舟岛,”惠特尼说,“海员对那个地方有着莫名其妙的恐惧。迷信……”“看不见,”雷恩斯福德说。他试图透过笼罩着游艇的潮湿而闷热的夜幕张望。“再过几天到了巴西,天空就会晴朗多了,”惠特尼保证说,“我们应当在亚马孙河上游痛痛快快地打打猎。打猎是一种好运动。”“是世界上最好的运动，”雷恩斯福德表示同意。后来，他的伙伴下去睡觉了，雷恩斯福德留在甲板上再抽一袋烟。正吸烟时，一种意料不到的声音使他吃了一惊，接连又是两声，黑夜中有人开了三枪。他朝枪响的方向极目眺望，但象是隔着一张毯子要透视过去似的。雷恩斯福德跳上船栏，以便站得更高些，烟斗撞着绳索，从嘴边掉了下去。他急忙倾身抓烟斗，身体一下子失去了平衡，跌落到像热血般温暖的加勒比海中。他挣扎着游出水面，大声呼喊。随着游艇的灯光越离越远，他拚命地划水追赶，但是灯光很快就消失在夜色中。刚才的枪声来自右方。雷恩斯福德尽力朝那个方向游去，不知游了多久。然后从昏暗中传来了兽类受惊吓时的叫声——接着就被一声响亮而短促的手枪声打断了。差不多已经游到了礁石上，他才看见是礁石。他使出剩下的一点力挣脱开旋流，喘着气，一头扑在礁石上，就呼呼大睡起来。一觉醒来时已近黄昏。海滩边的丛林中显然无路可通，倒不如沿着岸边走去还比较方便些。暮霭渐渐笼罩住大海和丛林，雷恩斯福德这才看见崖壁高处一幢宽大的房子所闪射出的灯光。于是他走上了台阶。一个穿着制服，身材魁梧、大黑胡子垂到腰部的人，手握左轮开了门。“不用大惊小怪，”雷恩斯福德说，“我是从船上落海的。我的名字叫桑格·雷恩斯福德，家住纽约市。”又一个身穿晚礼服的白头发高个子走出来，并且伸出了手。“我是沙洛夫将军。承蒙大名鼎鼎的狩猎家雷恩斯福德先生光临，真不胜荣幸。我拜读过你在西藏寻猎雪豹的那本大作。”他做了个手势，那穿制服的人收起了手枪。“伊凡壮得出奇，”将军说，“有点象野蛮人。他是哥萨克人，我也是。”“还是请进来吧，我们不应该在门口聊天。你需要换换衣服，吃点东西，休息一下。请吧，雷恩斯福德先生，让伊凡给你带路。”后来他们在豪华的大厅里坐下来吃晚饭时，将军说道：“我知道你的大名，你也许感到奇怪。有关打猎的书我全都读过。我生平只有一种嗜好–打猎。”“你这里有一些很漂亮的兽头，”雷恩斯福德望了望墙壁说，“那只好望角野牛真大。我一直认为在所有的大野兽中好望角野牛是最危险的。”“那倒不是，”将军回答说，“在这里的猎场上，我猎取的是更危险的猎物。当然不是土生土长的，得由我向这岛上提供。”“将军，你弄进来些什么东西呢？老虎吗？”将军咧嘴笑了一笑：“不是，老虎已经是不够刺激的了，并不真正危险。雷恩斯福德先生，我所寻求的是危险。”“究竟是什么猎物……？”“我告诉你，我终于认识到，我必须创造出一种新的动物来猎取。我又问自己：理想的猎物应该具备哪些特点？答案是：必须有勇气，有智谋–而最重要的是–必须具有思维能力。好在有一种动物能够思维。”“你的意思该不会是说杀人吧？”“这词儿多难听，”将军说道，“我猎取的不过是世上的渣滓–不定期货船上的船员。来窗口看看吧，”他一按电钮，远方海上便出现闪光。“灯光指示出一航道，那里都是些象剃刀那样锐利的礁石，船只碰上去就象坚果壳被碰碎似的。”“你要明白，这是一种游戏。我向来客提出打猎的建议。让他先走三小时。我随后出发，只带一只22口径手枪。如果受猎的人能三整天不让我找到他，他就赢了。如果被我找到”–将军微微一笑–“那他就输了。”“要是他不肯受猎呢？”“那么我就把他交给伊凡，这个人头脑简单，曾经一度担任过沙皇手下正式的鞭笞手，对于游戏，有他自己一套想法。来客总是宁可打猎的。“如果客人赢了呢？”将军笑得更得意了。“迄今我还没输过，不过曾经有一个人几乎赢了。我最后不得不出动猎犬。你来看，”他领先走向另一窗口，雷恩斯福德看见十来只巨大的黑色的东西在下面晃动。“现在我带你去参观一下最近收集的猎物。到书房去，好吗？不想来！啊，对了。你需要好好睡一觉。明天你就会觉得象换了一个人似的。”“第二天一直到午饭时分沙洛夫将军才露面。雷恩斯福德发现他那双漆黑的眼睛在打量自己。“今晚，”将军说，“我们去打猎–就你和我两个人。”“不，将军，”雷恩斯福德说，“我不打猎。”将军耸了耸肩：“随你的便吧。不过我提醒你，我的所谓游戏，比伊凡的却有趣得多。你会认为这值得一试–我们可以斗智，比森林知识，较量体力。”“如果我赢了……”雷恩斯福德开口说。“如果到了第三天的午夜，我还没有找到你，我就承认失败。我的小帆船会把你送上大陆。我决不食言。”“现在，”沙洛夫一本正经地说，“伊凡会把猎装，食物和一把刀给你。我劝你避开岛上东南角上的大沼泽，我们把那个地方称为死沼，那里有流沙。我要等到黄昏才出发。夜晚打猎比较有意思，你说是吗？”……雷恩斯福德被一种近乎惊慌的心情所驱使，在丛林中奔走了两小时，此刻才停下来估量形势。“这样我会让他有踪迹可循了。”他暗自思忖着，一面踏上了无路的荒野。想起猎狐的经验和狐狸逃遁的方式，他踏出了一连串复杂的圈子，弄得足迹往返交错。天黑了，雷恩斯福德到达林木茂密的山脊，腿走累了。“当了狐狸，”他想，“现在再当野猫。”近旁有一棵枝桠粗密的大树，他小心翼翼地爬了上去，避免遗留痕迹，然后躺在一根粗壮的大树枝上。长夜漫漫。将近黎明时分，听到丛林中有什么东西缓慢而又谨慎地走过来。他将身躯贴紧大树枝，透过浓密的层层树叶向下望去。是沙洛夫将军。他一步一步地走过来，两眼密切注视着地面。快到树下时他停了下来，跪在地上察看一阵。接着又站起来，点燃了一支黑色的长香烟。他的目光沿着树干一寸又一寸地向上移，雷恩斯福德屏住呼吸。但那猎人敏锐的目光快移到猎物栖身的树枝时却停住了。沙洛夫深思熟虑地微笑着，一边张嘴向空中喷了个烟圈。随即漫不经心地走开了。雷恩斯福德把胸中憋了好久的气吐了出来。他首先想到：那将军显然在夜晚也能在丛林中进行艰难的追踪，只因为一时不巧，才没看到他所追猎的对象。他再仔细一想：将军笑什么？为什么转身回去？那是将军在捉弄他，要留他再戏耍一天。雷恩斯福德此刻体会到恐惧的滋味了。他从树上滑下来，进入森林。走了三百码后便停住了脚，在那里有株大枯树。很不牢固地斜靠着一株较小的活树。他拔刀出鞘，开始动手。干完后，他急忙躲到一百英尺外一根倒放着的原木后面。他等了没多久。那哥萨克人只顾一味追踪，没有发现机关，一脚踩了上去。他的脚碰上凸出的树枝–触发装置。将军发觉情况不对，纵身后跃，但是已经晚了；枯树倒下，擦身击中了他。他站在那里，揉着受伤的肩膀，那含有讥讽的笑声响彻丛林。“雷恩斯福德，”他叫道，“让我祝贺你。没有多少人会架设马来捕人机。你真有意思，雷恩斯福德先生，现在我回去裹伤；只是一点轻伤。别着急，我会回来的。”将军走了之后，雷恩斯福德继续奔逃。天色渐暗，接着黑夜降临。他觉得他的鹿皮鞋踩在地上越来越软。再跨前一步，脚陷进了烂泥。原来是死沼！松软的土地使他有了个主意。他从流沙处退后十几英尺，开始在地面掘坑。挖到齐肩的深度时，他爬上来找了些坚硬的小树制作树桩，将一头削尖。这些树桩都插进坑底，尖端向上。接着他又用野草和树枝搭编成粗席，盖住坑口，然后，他汗流浃背地蹲在一棵树后。推广 喜马拉雅，你的手机随身听！中国最大声音库，想听啥都有！听到松软土地的脚步声。他知道追逐者来了。接着是树枝的折裂声–以及树桩戳中什么时的哀叫。他探头一瞧，在坑边三英尺处，有一个人拿着手电筒站着。“雷恩斯福德！”将军叫道，“你的缅甸猎虎坑弄死了我一只最好的狗。你又得手了。现在我要把猎狗都带来，看你怎样应付。多谢，这一夜玩得很有趣。”拂晓时分，留在沼泽附近的雷恩斯福德惊醒过来，听到远处模糊而又不连续的声音：猎犬的狂吠。他站着思索了一阵，想起在乌干达学会的土著把戏。他离开沼泽地，很快找到一株有弹性的小树。他将猎刀绑在小树上，锋刃冲着足迹。再用一截野葡萄藤将小树反扎……然后拚命跑开。猎犬嗅出了新鲜气味，叫得更起劲了，雷恩斯福德那时体会到了当困兽的感觉。猎狗的吠叫声突然停止。雷恩斯福德跳动的心也跟着停住了。他们一定来到了插刀的地方。他激动地爬上树，回头张望。追逐者已站定了。但希望落了空，眼见沙洛夫将军一枪在手，依然无恙。弹起的小树挥动猎刀，却击中了用皮带牵着猎犬的伊凡。雷恩斯福德跳回地面，猎犬又狂吠起来。“要镇静，别慌！”他一面撒腿狂奔，一面喘着气自言自语。前面树木间呈现出一条蓝色的裂缝。他到达了海边，隔着小海湾他可以看到对面筑成那幢大房子的灰色巨石。波涛在二十英尺下激荡翻腾。雷恩斯福德犹豫了一会儿，然后便纵身跃入海中。将军带着他的猎犬赶到海边空旷处站住，对着碧绿色的那片海水观望了一阵。当天晚上吃饭时，有两件懊恼的事情使沙洛夫将军吃得不香。第一，不容易找到人接替伊凡；第二，猎物没到手。当然，这是由于那个已自杀的美国人没有遵守比赛规则。于是他去书房读书，藉以排遣愁闷。到了十点钟，他感到有点舒适而又疲倦，这才起身转回卧室。他没有开灯，先走到窗边看看下面的院子。那些大猎犬在月光下都看得很清楚，他不觉大声说道：“希望下次运气好点。”接着便扭亮了灯。一直躲在有罩盖的床帐里的人，站在他的面前。“雷恩斯福德！”将军尖叫起来，“天晓得你是怎么会来到这里的？”“游过来的。我发现这样比穿过丛林要快些。”对方倒吸一口冷气，露出笑容：“我向你道贺，这场游戏你赢了。”雷恩斯福德却没有笑。“我还是一头陷入绝境的困兽，”他的嗓音低哑深沉，“准备吧，沙洛夫。”这位将军深深鞠了一躬。“我明白，”他说道，“好极了。我们之中总有一个要拿去喂狗。另一个就睡在这张美好的床上。小心吧，雷恩斯福德……”雷恩斯福德认为他有生以来从没有睡过比这更舒适的床。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[斜屋犯罪]]></title>
            <guid>6979800697984adba0d56088d24124df</guid>
            <pubDate>Mon, 24 Feb 2020 18:55:56 GMT</pubDate>
            <content:encoded><![CDATA[內容簡介
《斜屋犯罪》感
出場人物
序幕
〔第一幕〕第一場　流冰館的玄關<a href="/article/最危险的游戏">最危险的游戏</a>
〔第一幕〕第二場　流冰館的會客室
〔第一幕〕第三場　塔
〔第一幕〕第四場　一號房
〔第一幕〕第五場　會客室
〔第一幕〕第六場　圖書室
〔第二幕〕第一場　會客室
〔第二幕〕第二場　十四號房，菊岡榮吉的房間
〔第二幕〕第三場　九號房，金井夫婦的房間
〔第二幕〕第四場　再度回到會客室
〔第二幕〕第五場　塔上幸三郎的房間
〔第二幕〕第六場　會客室
〔第二幕〕第七場　圖書室
〔第二幕〕第八場　會客室
〔第二幕〕第九場　天狗屋
〔第二幕〕第十場　會客室
〔第三幕〕第一場　會客室
〔第三幕〕第二場　天狗屋
〔第三幕〕第三場　十五號房，刑警的房間
〔第三幕〕第四場　會客室
〔第三幕〕第五場　圖書室
〔第三幕〕第六場　會客室
〔中場休息〕
〔終幕〕第一場　會客室西側樓梯一樓轉角處
〔終幕〕第二場　十四號房
〔終幕〕第三場　天狗屋
〔終幕〕第四場　會客室
〔終幕〕第五場　小丘
〔尾聲〕]]></content:encoded>
        </item>
    </channel>
</rss>